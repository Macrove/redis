#include <assert.h>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <netinet/in.h>
#include <stdio.h>
#include <sys/poll.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <vector>
#include <poll.h>
#include <unistd.h>

#define PORT 8080
#define K_MAX_BUF 32<<20 // what should be the ideal value?

#define WANT_READ_FLAG POLL_IN
#define WANT_WRITE_FLAG POLL_OUT
#define WANT_CLOSE_FLAG POLL_ERR

struct Conn{
    int fd;
    short flags;
    std::vector<uint8_t> incoming; // data to be parsed by app
    std::vector<uint8_t> outgoing; // res generated by app
    Conn(): fd(0), flags(0), incoming({}), outgoing({}){};

};

static void die(const char* message){
    perror(message);
    std::abort();
}

static void fd_set_nb(int fd){
    errno = 0;
    int flags = fcntl(fd, F_GETFL, 0);
    if (errno) {
        die("fcntl:F_GETGL failed");
    }
    flags |= O_NONBLOCK;

    errno = 0;
    fcntl(fd, F_SETFL, 0);
    if (errno) {
        die("fcntl:F_SETFL failed");
    }

}

struct Conn* handle_accept(int fd){
    struct sockaddr_in client_addr;
    client_addr.sin_family = AF_INET;
    socklen_t client_addr_len = sizeof(client_addr);

    int connfd = accept(fd, (struct sockaddr *)&client_addr, &client_addr_len);
    if (connfd < 0) {
        die("Accept Failed");
    }
    uint32_t ip = client_addr.sin_addr.s_addr;
    fprintf(stderr, "new client from %u.%u.%u.%u:%u\n", ip & 255, ip>>8 & 255, ip>> 16 & 255, ip >> 24 & 255, ntohl(client_addr.sin_port));

    fd_set_nb(connfd);

    Conn *conn = new Conn();
    //conn->fd = ?;
    conn->fd = connfd;
    conn->flags |= WANT_READ_FLAG;

    return conn;

}

void msg_errno(const char* msg){
    fprintf(stderr, "[errno:%d] %s\n",errno, msg);
}
void msg(const char* msg){
    fprintf(stderr, "%s", msg);
}
void buf_append(std::vector<uint8_t> &buf, uint8_t *data, size_t len){
    buf.insert(buf.end(), data, data+len);
}
bool try_one_request(Conn* conn){
    if (conn->incoming.size() < 4) {
        return false;
    }
    uint32_t len = 0;
    std::memcpy(&len, conn->incoming.data(), 4);
    if(len > K_MAX_BUF){
        msg("Too big msg");
        conn->flags |= WANT_CLOSE_FLAG;
        return false;
    }
}

int handle_write(Conn* conn){
    return 0;
}

void handle_read(Conn* conn){
    uint8_t buf[64*1024];
    size_t rv = read(conn->fd, buf, sizeof(buf));
    if(rv <0 && errno == EAGAIN){
        return; // not an error
    }
    if(rv < 0){
        msg_errno("Read failed");
        conn->flags |= WANT_CLOSE_FLAG;
        return;
    }
    if(rv == 0){
        if (conn->incoming.size()==0) {
            msg("Client closed");
        }
        else{
            msg_errno("Unexpected EOF");
        }
        conn->flags |= WANT_CLOSE_FLAG;
        return;
    }

    // got some new data, put it in incoming 
    buf_append(conn->incoming, buf, sizeof(buf));

    while(try_one_request(conn)){};

    if (conn->outgoing.size()>0) {
        conn->flags &= ~WANT_READ_FLAG;
        conn->flags |= WANT_WRITE_FLAG;
        handle_write(conn);
    }
}

int main(){
    // the listening socket
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0) {
        die("Socket failed");
    }
    int val = 1;
    if(setsockopt(AF_INET, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val))){
        die("setsockopt Failed");
    };

    //bind
    struct sockaddr_in addr = {};
    socklen_t addrlen = sizeof(addr);
    addr.sin_family = AF_INET;
    addr.sin_port = PORT;
    addr.sin_addr.s_addr = ntohl(0); // wildcard = 0, same as INADDR_ANY

    int rv = bind(fd, (const struct sockaddr *)&addr, addrlen);
    if(rv){
        die("Bind failed");
    }

    // set the listen fd to nonblocking mode
    fd_set_nb(fd);

    // listen
    rv = listen(fd, SOMAXCONN); // SOMAXCONN - socket outstanding max conn
    if (rv) {
        die("listen failed");
    }

    std::vector<Conn * > fd2conn;
    std::vector<struct pollfd> poll_args;


    // even loop
    while (true) {
        poll_args.clear();
        poll_args.push_back({0, POLL_IN, 0});

        for (Conn* &conn : fd2conn) {
            struct pollfd pfd = {conn->fd, 0, 0};
            // events given connection is interested in
            pfd.events |= POLLERR | conn->flags;
            poll_args.push_back(pfd);
        }
        // blocking call waiting for readiness
        int rv = poll(poll_args.data(), (nfds_t)poll_args.size(), -1);
        if (rv < 0 && errno == EINTR) { // interrupt sys call
            continue;
        }
        if(rv < 0){
            die("poll failed");
        }
        // handle listening socket
        if(poll_args[0].revents){
            if(Conn *conn = handle_accept(poll_args[0].fd)){
                if (ssize_t(conn->fd) >= fd2conn.size()) {
                    fd2conn.resize(conn->fd + 1);
                }
                assert(!fd2conn[conn->fd]);
                fd2conn[conn->fd] = conn;
            }
        }

        // handle other connections
        for (int i=1; i<poll_args.size(); i++) {
            uint32_t ready = poll_args[i].revents;
            if(!ready){
                continue;
            }
            Conn *conn = fd2conn[poll_args[i].fd];
            if (conn->flags & WANT_READ_FLAG) {
                assert(conn->flags & POLLIN);
                handle_read(conn);
            }
            if(conn->flags & WANT_WRITE_FLAG){
                assert(conn->flags & POLLOUT);
                handle_write(conn);
            }
            if(conn->flags & WANT_CLOSE_FLAG || (ready & POLLERR)){
                close(conn->fd);
                fd2conn[conn->fd] = NULL;
                delete conn;
            }
            int rv = close(fd);
            if(rv){
                die("Close failed");
            }
        }
    }


    // accept in event loop

        

    return 0;
}
