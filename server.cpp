#include <algorithm>
#include <assert.h>
#include <cstdint>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <netinet/in.h>
#include <stdio.h>
#include <sys/poll.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <vector>
#include <poll.h>
#include <unistd.h>
#include "utils.h"
#include "hashtable.h"


#define PORT 8080
#define K_MAX_BUF 32<<20
#define K_MAX_ARGS 200*1000

#define WANT_READ_FLAG POLLIN
#define WANT_WRITE_FLAG POLLOUT
#define WANT_CLOSE_FLAG POLLERR

struct Conn{
    int fd;
    short flags;
    std::vector<uint8_t> incoming; // data to be parsed by app
    std::vector<uint8_t> outgoing; // res generated by app
    Conn(): fd(0), flags(0), incoming({}), outgoing({}){};

};


static void fd_set_nb(int fd){
    errno = 0;
    int flags = fcntl(fd, F_GETFL, 0);
    if (errno) {
        die("fcntl:F_GETGL failed");
    }
    flags |= O_NONBLOCK;

    errno = 0;
    fcntl(fd, F_SETFL, flags);
    if (errno) {
        die("fcntl:F_SETFL failed");
    }

}

struct Conn* handle_accept(int fd){
    struct sockaddr_in client_addr;
    socklen_t client_addr_len = sizeof(client_addr);

    errno = 0;
    int connfd = accept(fd, (struct sockaddr *)&client_addr, &client_addr_len);
    //if (connfd < 0 && (errno == EAGAIN || errno == EWOULDBLOCK)) {
        //msg("listening queue empty");
        //return NULL;
    //}
    if (connfd < 0) {
        msg("Accept Failed");
        return NULL;
    }
    uint32_t ip = ntohl(client_addr.sin_addr.s_addr);
    //fprintf(stderr, "new client from %u.%u.%u.%u:%u\n", ip>>24 & 255, ip>>16 & 255, ip>>8 & 255, ip & 255, ntohl(client_addr.sin_port));

    fd_set_nb(connfd);

    Conn *conn = new Conn();
    conn->fd = connfd;
    conn->flags |= WANT_READ_FLAG;

    return conn;

}

void buf_append(std::vector<uint8_t> &buf, const uint8_t *data, size_t len){
    buf.insert(buf.end(), data, data+len);
}
// optimization possibility - have a buffer struct, so that you just have to move the pointer instead of erase from start
void consume_buf(std::vector<uint8_t>&buf, uint32_t len){
    buf.erase(buf.begin(), buf.begin()+len);
}
static bool read_u32(const uint8_t *&cur, const uint8_t *end, uint32_t &out){
    // check if 4 bytes available
    // read 4 bytes
    if(cur + 4 > end){
        //msg("read_u32:insufficient data");
        return false;
    }
    memcpy(&out, cur, 4);
    cur += 4;
    return true;
}
static bool read_str(const uint8_t *&curr, const uint8_t *end, size_t n, std::string &out){
    if(curr + n > end){
        //msg("read_str: insufficient bytes");
        return false;
    }
    out.assign(curr, curr + n);
    curr += n;
    return true;
}
enum ResponseStatus {
    RES_OK = 0,
    RES_NX = 1,
    RES_ERR = 2,
};

struct Response{
    enum ResponseStatus status = RES_OK;
    std::vector<uint8_t> data;
};
static int32_t parse_req(const uint8_t *&data, const uint8_t* end, std::vector<std::string> &out){
    // if can't read uint32, return -1
    // if len of req > k_max_buf - return -1
    // read len of req times from data and store in out
    // arrangement of request in data - nstr, len1 str1, len2, str2
    // lastly check if after consuming data, there's anything still left, data != end => return -1 for trailing garbage
    // return 0
    // figured - it's always - read 4 bytes, and find how much more to read
    // so structure of message that comes = [len of total request ahead of me], [nstr = how many strings. not how many reqs], [lenstr], [str = get set del or key or new val], [lenstr],[str]
    uint32_t nstr = 0;
    if(!read_u32(data, end, nstr)){
        msg("parse_req:can't read nstr");
        return -1;
    }
    //msg("nstr:%d", nstr);
    if(nstr > K_MAX_ARGS){
        msg("parse_req:Too big request");
        return -1;
    }
    while (out.size() < nstr) {
        uint32_t len=0;
        if(!read_u32(data, end, len)){
            msg("parse_req:couldn't read len of str");
            return -1;
        }
        //msg("len:%d",len);
        out.push_back("");
        if(!read_str(data, end, (size_t)len, out.back())){
            msg("parse_req:failed to read_str");
        }
        //msg("out.back():%s", out.back().c_str());
    }
    return 0;
}

HMap* g_data = new HMap();
struct Entry {
    HNode node;
    std::string key;
    std::string val;
};

#define container_of(ptr, T, member)    \
    ((T*)((char*)ptr - offsetof(T, member)))

bool entry_eq(HNode* lhs, HNode* rhs){
    Entry* e_lhs = container_of(lhs, Entry, node);
    Entry* e_rhs = container_of(rhs, Entry, node);
    return e_lhs->key == e_rhs->key;
}

// FNV hash
static uint64_t str_hash(const uint8_t *data, size_t len) {
    uint32_t h = 0x811C9DC5;
    for (size_t i = 0; i < len; i++) {
        h = (h + data[i]) * 0x01000193;
    }
    return h;
}


void do_get(HMap* hmap, std::vector<std::string> &cmd, Response &out){
    Entry key;
    swap(key.key, cmd[1]);
    key.node.hcode = str_hash((uint8_t*) key.key.data(), key.key.size());
    HNode* node = hm_lookup(hmap, &key.node, entry_eq);
    if(!node){
        msg("do_request:Get Key:%s, Not Found", key.key.c_str());
        out.status = RES_NX; 
        return;
    }
    const std::string &val = container_of(node, Entry, node)->val;
    uint32_t res_len = val.size();
    buf_append(out.data, (uint8_t*)&res_len, 4);
    buf_append(out.data, (uint8_t*)val.data(), res_len);
}

void do_del(HMap* hmap, std::vector<std::string> &cmd, Response &out){
    Entry key;
    swap(key.key, cmd[1]);
    key.node.hcode = str_hash((uint8_t*) key.key.data(), key.key.size());
    HNode* node = hm_delete(hmap, &key.node, entry_eq);
    if(!node){
        msg("do_request: %s not present. Skipping delete", cmd[1].c_str());
        out.status = RES_NX;
        return;
    }
    delete container_of(node, Entry, node);
}

void do_set(HMap* hmap, std::vector<std::string> &cmd, Response &out){
    Entry key;
    swap(key.key, cmd[1]);
    key.node.hcode = str_hash((uint8_t*) key.key.data(), key.key.size());
    HNode* node = hm_lookup(hmap, &key.node, entry_eq);
    if(!node){
        Entry *ent = new Entry();
        ent->node.hcode = key.node.hcode;
        swap(ent->val, cmd[2]);
        swap(ent->key, key.key);
        hm_insert(hmap, &ent->node);
        return;
    }
    Entry *ent = container_of(node, Entry, node);
    swap(ent->val, cmd[2]);
}

static void do_request(std::vector<std::string> &cmd, Response &out){
    if (cmd.size() == 2 && cmd[0] == "get") {
        do_get(g_data, cmd, out);
    }
    else if (cmd.size() == 2 && cmd[0] == "del") {
        do_del(g_data, cmd, out);
    }
    else if(cmd.size() == 3 && cmd[0] == "set"){
        do_set(g_data, cmd, out);
    }
    else{
        msg("do_request:Invalid request");
        out.status = RES_ERR;
    }
}
static void make_response(const Response &resp, std::vector<uint8_t> &out){
    // fill out buffer with response
    // format - len of response +4, resp_statuc, resp_data
    uint32_t len = 4+resp.data.size();
    buf_append(out, (uint8_t *)&len, 4);
    buf_append(out, (uint8_t*)&resp.status, 4);
    buf_append(out, resp.data.data(), resp.data.size());
    //for(int i=0;i<out.size();i++){
        //std::cout << (int)out[i] << " ";
    //}
    //std::cout << '\n';
}
// optimization - response data goes directly to conn->outgoing
// resp - status and data
bool try_one_request(Conn* conn){
    if (conn->incoming.size()==0) {
        //msg("try_one_request:conn->incoming.size()==0");
        return false; 
    }
    uint32_t req_len = 0;
    const uint8_t* data = conn->incoming.data();
    const uint8_t* end  = data + conn->incoming.size();
    if(!read_u32(data, end, req_len)){
        msg("try_one_request:couldn't read req_len");
        return false;
    }
    if(req_len > K_MAX_BUF){
        msg("try_one_request: too big message. closing connection");
        conn->flags |= WANT_CLOSE_FLAG;
        return false;
    }
    if(conn->incoming.size() < req_len+4){
        msg("try_one_request:read required. full req_len data not present");
        return false;
    }

    std::vector<std::string> cmd;
    if(parse_req(data, end, cmd) < 0){
        //msg("try_one_request:Couldn't parse request. closing connection");
        conn->flags |= WANT_CLOSE_FLAG;
        return false;
    }
    Response resp;
    do_request(cmd, resp);
    make_response(resp, conn->outgoing);
    consume_buf(conn->incoming, 4+req_len);
    //msg("conn->incoming.size() = ", conn->incoming.size());
    return true;
}


void handle_write(Conn* conn){
    //msg("Handling write");
    assert(conn->outgoing.size() > 0);
    ssize_t rv = write(conn->fd, conn->outgoing.data(), conn->outgoing.size());
    if (rv < 0 && errno == EAGAIN) {
        return; // not an error
    }
    if (rv < 0) {
        // error in writing
        msg_errno("Write error");
        conn->flags |= WANT_CLOSE_FLAG;
        return;
    }
    //msg("Consuming write buf:size:%d, rv = %d", conn->outgoing.size(), rv);
    consume_buf(conn->outgoing, (size_t)rv);
    //msg("Consumed write buf:size:%d", conn->outgoing.size());
    if(conn->outgoing.size() == 0){
        conn->flags |= WANT_READ_FLAG;
        conn->flags &= ~WANT_WRITE_FLAG;
    }
}

void handle_read(Conn* conn){
    //msg("Handling read");
    uint8_t buf[64*1024];
    errno = 0;
    ssize_t rv = read(conn->fd, buf, sizeof(buf));
    if(rv <0 && errno == EAGAIN){
        return; // not an error
    }
    if(rv < 0){
        msg_errno("Read failed");
        conn->flags &= ~WANT_READ_FLAG;
        conn->flags |= WANT_CLOSE_FLAG;
        return;
    }
    if(rv == 0){
        if (conn->incoming.size()==0) {
            //msg("closing client");
        }
        else{
            msg_errno("Unexpected EOF");
        }
        conn->flags |= WANT_CLOSE_FLAG;
        return;
    }
    //msg("read bytes:%d", rv);

    // got some new data, put it in incoming 
    buf_append(conn->incoming, buf, (size_t)rv);

    while(try_one_request(conn)){};

    // why not conn->income.size>0 => want read more, since there is an incomplete request in the queue
    // one issue would be the too big msg.
    // is it like there can't be less than 4byte of header? ig so
    if (conn->outgoing.size()>0) {
        conn->flags &= ~WANT_READ_FLAG;
        conn->flags |= WANT_WRITE_FLAG;
        return handle_write(conn);
    }
}

int main(){
    // the listening socket
    int fd = socket(AF_INET, SOCK_STREAM, 0);
    if (fd < 0) {
        die("Socket failed");
    }
    int val = 1;
    if(setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &val, sizeof(val))){
        die("setsockopt Failed");
    };

    //bind
    struct sockaddr_in addr = {};
    socklen_t addrlen = sizeof(addr);
    addr.sin_family = AF_INET;
    addr.sin_port = htons(PORT);
    addr.sin_addr.s_addr = htonl(0); // wildcard = 0, same as INADDR_ANY

    int rv = bind(fd, (const struct sockaddr *)&addr, addrlen);
    if(rv){
        die("Bind failed");
    }

    // set the listen fd to nonblocking mode
    fd_set_nb(fd);

    //std::cout << "fd_set_nb success" << std::endl;

    // listen
    rv = listen(fd, SOMAXCONN); // SOMAXCONN - socket outstanding max conn
    if (rv) {
        die("listen failed");
    }

    std::vector<Conn * > fd2conn;
    std::vector<struct pollfd> poll_args;


    // event loop
    bool write_flag_set = false;
    msg("Server ready");
    while (true) {
        rv = 0;
        //msg("write_flag_set:%d", write_flag_set);
        poll_args.clear();
        poll_args.push_back({fd, POLLIN, 0});

        for (Conn* &conn : fd2conn) {
            if(!conn){
                continue;
            }
            struct pollfd pfd = {conn->fd, 0, 0};
            // events given connection is interested in
            pfd.events |= conn->flags;
            //msg("pfd.events:%d", pfd.events);
            //msg("pfd.revents:%d", pfd.revents);
            poll_args.push_back(pfd);
        }
        //msg("size of fd2conn:%d", fd2conn.size());
        // blocking call waiting for readiness
        //msg("poll waiting:%d", rv);
        //msg("poll_args_i: %d, read_e:%d, write_e:%d, close_e:%d,read_r:%d, write_r:%d, close_r:%d", 1, poll_args[1].events&WANT_READ_FLAG,poll_args[1].events&WANT_WRITE_FLAG,poll_args[1].events&WANT_CLOSE_FLAG ,poll_args[1].revents&WANT_READ_FLAG,poll_args[1].revents&WANT_WRITE_FLAG,poll_args[1].revents&WANT_CLOSE_FLAG);
        rv = poll(poll_args.data(), (nfds_t)poll_args.size(), -1);
        //msg("poll success:%d", rv);
        if (rv < 0 && (errno == EINTR || errno == EAGAIN)) { // interrupt sys call
            msg("Inturrupt poll call");
            continue;
        }
        if(rv < 0){
            die("poll failed");
        }
        // handle listening socket
        if(poll_args[0].revents){
            Conn *conn = handle_accept(fd);
            if(conn){
                if (size_t(conn->fd) >= fd2conn.size()) {
                    fd2conn.resize(conn->fd + 1);
                }
                assert(!fd2conn[conn->fd]);
                fd2conn[conn->fd] = conn;
            }
        }

        // handle other connections
        for (int i=1; i<poll_args.size(); i++) {
            uint32_t ready = poll_args[i].revents;
            if (ready & WANT_WRITE_FLAG) {
                write_flag_set = true; 
            }
            //msg("poll_args_i: %d, read_e:%d, write_e:%d, close_e:%d,read_r:%d, write_r:%d, close_r:%d", i, poll_args[i].events&WANT_READ_FLAG,poll_args[i].events&WANT_WRITE_FLAG,poll_args[i].events&WANT_CLOSE_FLAG ,ready&WANT_READ_FLAG,ready&WANT_WRITE_FLAG,ready&WANT_CLOSE_FLAG);
            if(!ready){
                continue;
            }
            Conn *conn = fd2conn[poll_args[i].fd];
            if (ready & POLLIN) {
                assert(conn->flags & WANT_READ_FLAG);
                handle_read(conn);
            }
            if(ready & POLLOUT){
                assert(conn->flags & WANT_WRITE_FLAG);
                handle_write(conn);
            }
            if((ready & POLLERR) || (conn->flags & WANT_CLOSE_FLAG)){
                close(conn->fd);
                fd2conn[conn->fd] = NULL;
                delete conn;
            }
        }
    }
    rv = close(fd);
    if(rv){
        die("Close failed");
    }
    return 0;
}
